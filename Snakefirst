# Pipeline to make the assemblies from all the files in input folder
# It is rigid for now, i.e. it assumes that 12 sub assemblies and only one contig are generated in all cases

def get_phage_names(input_folder):
    "Returns a list of the file names present in the input_folder."
    phage_names = os.listdir(input_folder)
    for ii in range(len(phage_names)):
        phage_names[ii] = phage_names[ii].replace(".fasta", "")
        phage_names[ii] = phage_names[ii].replace(".fastq.gz", "")

    return phage_names

IDs = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
NAMES = get_phage_names("input")

rule all:
    input: 
        trees = expand("output/{phage_name}/clusters/contigs_tree.txt", phage_name = NAMES),
        logs = expand("output/{phage_name}/clusters/Snakefirst.log", phage_name = NAMES)

rule convert_gz:
    message:
        """
        Converting {input} to zip version for compatibility with the rest of the pipeline.
        """
    input:
        raw_reads_uncompressed = "input/{phage_name}.fastq"
    output:
        raw_reads_compressed = "input/{phage_name}.fastq.gz"
    shell:
        """
        gzip {input.raw_reads_uncompressed}
        """

rule filtlong:
    message:
        """
        Running filtlong on {input.raw_reads}
        """
    input:
        raw_reads = "input/{phage_name}.fastq.gz"
    
    output:
        filtered_reads = "output/{phage_name}/filtered.fastq"
    params:
        min_length = 5000,
        keep_percent = 95
    shell:
        """
        filtlong --min_length {params.min_length} --keep_percent {params.keep_percent} \
        {input.raw_reads} > {output.filtered_reads}
        """

rule subsample:
    message:
        """
        Subsampling {input.reads} in 12 parts.
        """
    input:
        reads = rules.filtlong.output.filtered_reads
    output:
        out_dir = directory("output/{phage_name}/read_subsets"),
        subsampled = expand("output/{phage_name}/read_subsets/sample_{id}.fastq", 
                         id=IDs,
                         allow_missing=True)
    threads: 4
    shell:
        """
        trycycler subsample --reads {input.reads} --out_dir {output.out_dir} --threads {threads}
        """

rule assemble_flye:
    message:
        """
        Assembling {input.subsampled} with flye.        
        """
    wildcard_constraints:
        id = "(01|02|03|04)"
    input:
        subsampled = "output/{phage_name}/read_subsets/sample_{id}.fastq"
    output:
        assembly = "output/{phage_name}/assemblies/assembly_{id}.fasta"
    threads: 4
    resources:
        mem_mb = 8
    params:
        tmp_dir = directory("output/{phage_name}/assemblies/assembly_{id}")
    shell:
        """
        flye --nano-raw {input.subsampled} --threads {threads} --out-dir {params.tmp_dir}
        cp {params.tmp_dir}/assembly.fasta {output.assembly}
        rm -r {params.tmp_dir} 
        """

rule assemble_raven:
    message:
        """
        Assembling {input.subsampled} with raven.
        """
    wildcard_constraints:
        id = "(05|06|07|08)"
    input:
        subsampled = "output/{phage_name}/read_subsets/sample_{id}.fastq"
    output:
        assembly = "output/{phage_name}/assemblies/assembly_{id}.fasta"
    threads: 2
    shell:
        """
        raven --threads {threads} {input.subsampled} > {output.assembly}
        rm raven.cereal
        """

rule assemble_mini:
    message:
        """
        Assembling {input.subsampled} with miniasm.
        """
    wildcard_constraints:
        id = "(09|10|11|12)"
    input:
        subsampled = "output/{phage_name}/read_subsets/sample_{id}.fastq"
    output:
        assembly = "output/{phage_name}/assemblies/assembly_{id}.fasta"
    threads: 4
    params:
        tmp_dir = directory("output/{phage_name}/assembly_{id}")
    shell:
        """
        mkdir {params.tmp_dir}
        minimap2 -x ava-ont -t {threads} {input.subsampled} {input.subsampled} \
        > {params.tmp_dir}/overlaps.paf
        miniasm -f {input.subsampled} {params.tmp_dir}/overlaps.paf > {params.tmp_dir}/unpolished.gfa
        minipolish --threads {threads} {input.subsampled} {params.tmp_dir}/unpolished.gfa > \
        {params.tmp_dir}/assembly.gfa
        any2fasta {params.tmp_dir}/assembly.gfa > {output.assembly}
        rm -r {params.tmp_dir}
        """

rule cluster:
    message:
        """
        Clustering the multiple assemblies.
        """
    input:
        assemblies = expand("output/{phage_name}/assemblies/assembly_{id}.fasta", id=IDs, allow_missing=True),
        reads = rules.filtlong.output.filtered_reads
    output:
        nwk_tree = "output/{phage_name}/clusters/contigs.newick"
    threads: 4
    params:
        min_contig_len = 5000
    shell:
        """
        trycycler cluster --reads {input.reads} --assemblies {input.assemblies} \
        --out_dir {wildcards.phage_name}/clusters \
        --min_contig_len {params.min_contig_len} --threads {threads}
        """

rule cluster_to_txt:
    message:
        """
        Converting {input.nwk_tree} to {output.txt_tree} for easier viewing.
        """
    input:
        nwk_tree = rules.cluster.output.nwk_tree
    output:
        txt_tree = "output/{phage_name}/clusters/contigs_tree.txt"
    threads: 1
    shell:
        """
        python snakecommands.py newick-to-txt {input.nwk_tree} {wildcards.phage_name}/clusters {output.txt_tree}
        """

rule check_contigs:
    message:
        """
        Checking whether there is need of human intervention.
        """
    input:
        nwk_tree = rules.cluster.output.nwk_tree
    output:
        logfile = "output/{phage_name}/clusters/Snakefirst.log"
    threads: 1
    params:
        max_length = 0.005
    shell:
        """
        python snakecommands.py check-contigs {wildcards.phage_name}/clusters {input.nwk_tree} {output.logfile} {params.max_length}
        """